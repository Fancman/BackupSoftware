* TODO Model improvement proposal
  - [x] Use similar format for source as destination in backups (source drive ID
    and path), so that external drives can be also considered as sources and can
    work even when drive letter doesn't match.
  - [x] Add field ='name' TEXT= to =drives= table (see below).
  - [x] =drive-ksuid= should be primary key of drives (no need to have two IDs).
  - [x] Allow more paths to be contained in one archive (m:n relation
    backup:destination).
  - [x] Save timestamp of last backup for each individual path on each drive (so
    that user can see when was a specific path backed up on a specific drive).
** [x] New model
  - use singular table naming -- shorter SQL statements and better for possible
    ORM (napr, drive, backup)
  - rename destinations to source (or something that better decsribes it)
  - add human-friendly name to drive
  - allow m:n relation between backup:source
  - allow m:n relation between source:drive (to know when was some path backed
    up on which drive)

  - TABLE drive:
    - PK drive_ksuid (INTEGER)
    - name (TEXT) -- this should be human-friendly name (e.g. "seagate drive")
  - TABLE archive:
    - PK id
    - name (TEXT) -- this will be used as the file name (It should probably
      include file extension that will enforce archiving/compression type (e.g.
      name="photos-2020.7z"). Otherwise we need another field with backup type.)
  - TABLE backup:
    - PK archive+drive
    - FK archive
    - FK drive    -- on which drive is the archive *stored*
    - path (TEXT) -- this should be relative path to a folder on the drive
  - TABLE source
    - PK id
    - FK archive
    - FK drive    -- *source* drive
    - path (TEXT) -- relative path to a folder/file on drive that's being backed
      up
  - TABLE timestamp
    - PK source+drive
    - FK source
    - FK drive
    - datetime (INTEGER is probably most efficient)

* TODO Allow user to choose just one destination/or all of them
  when starting the backup or updating archive.
* TODO Allow user to add or remove sources/destinations in backup
  This probably needs a new command.
* DONE Show the timestamp somewhere
  Probably a switch for =list-backups=.
* DONE Allow user to enter NAME for a Drive
* DONE Implement separate update operation
  Now it's always executing /add/ operation when creating or updating the
  archive. When the archive already exists, it should run the /update/
  operation.

* DONE Use just one process when archiving multiple sources
  Don't start a separate process for each source.
* TODO Allow user to choose archive to backup based on the archive
  Not just based on sources.
* TODO =remove-source= doesn't seem to work
* TODO Fix =remove-backup=
  =remove-backup= doesn't seem to delete the archive from the database. See also
  next TODO.
* TODO Error on =list-backups=
  There is an archive defined, but backups haven't been executed yet. Probably
  related to the previous TODO (occured after trying to create an archive with
  the same name that was previously "removed").
  #+begin_example
{0001-01-01 00:00:00 +0000 UTC false}
{2021-05-14 13:36:01 +0000 UTC true}
{0001-01-01 00:00:00 +0000 UTC false}
sql: Scan error on column index 0, name "source_id": converting NULL to int64 is unsupported
sql: Scan error on column index 0, name "source_id": converting NULL to int64 is unsupported
+-----------+---------------+-------------+--------------+---------+-------------+
| SOURCE ID | SOURCE DRIVE  | SOURCE PATH | DESTINATIONS | ARCHIVE | ARCHIVED AT |
+-----------+---------------+-------------+--------------+---------+-------------+
|         0 | Not accesible |             |              |         | Nil         |
+-----------+---------------+-------------+--------------+---------+-------------+
  #+end_example

  Steps to reproduce:

  1) Create an archive with 2 sources and one destination.
  2) =start-backup= on both sources
  3) =remove-backup=
  4) Create a new archive with exactly the same arguments

  Aftermath:
  - A new archive is created automatically (with timestamped name) -- this is
    generally a bad idea, because it's not what the user wanted. Automatic
    creation could be optionally configured for example.
  - Original archive still exists and was not removed from the DB.
  - Original sources still exist and were not removed from the DB -- they still
    point to the original archive.
* TODO Improve =remove-backup=
  - If archive IDs are being used, allow user to somehow see them.
  - Allow user to use the name of the archive.
  - Allow user to use the drive letter.
  - Ability to use IDs or KSUIDs can remain.
* TODO Don't print that drive was added when it is already in DB (=add-drive=)
  It's misleading information.
* TODO Update =database_scheme.sql=
  Is it still needed? Maybe it's unnecessary duplication.


* TODO Make abstractions for other file formats
  .tar etc.
* TODO Add interactive mode
* TODO Create batches
  Multiple backup operations. This can be also done as a shell script.
* TODO Write tests
  DB consistency, correctness of archived/restored filesâ€¦ Maybe this should be
  higher on the priority list?